set nocompatible              " be iMproved, required
filetype off                  " required

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
   Plugin 'VundleVim/Vundle.vim'
   Plugin 'tpope/vim-fugitive'
   "Plugin 'scrooloose/nerdtree'
   Plugin 'bronson/vim-trailing-whitespace'
   Plugin 'altercation/vim-colors-solarized'
   Plugin 'christoomey/vim-tmux-navigator'
   Plugin 'Yggdroot/indentLine'
   Plugin 'flazz/vim-colorschemes'
   Plugin 'fatih/molokai'
   " ~/.vim/vundle/YouCompleteMe/install.py --clang-completer --go-completer
   Plugin 'Valloric/YouCompleteMe'
   "{{{ golang
   Plugin 'fatih/vim-go', { 'do': ':GoInstallBinaries' }
   "}}}
   " Use gS, gJ
   Plugin 'AndrewRadev/splitjoin.vim' "
   Plugin 'SirVer/ultisnips'
   Plugin 'honza/vim-snippets'
   Plugin 'ctrlpvim/ctrlp.vim'
   Plugin 'ekalinin/Dockerfile.vim'
   Plugin 'vim-airline/vim-airline'
   Plugin 'vim-airline/vim-airline-themes'
   Plugin 'tpope/vim-unimpaired'
   Plugin 'tpope/vim-repeat'
   Plugin 'airblade/vim-gitgutter'
   " Use cs"' ds"'
   Plugin 'tpope/vim-surround'
   Plugin 'majutsushi/tagbar'
   Plugin 'w0rp/ale'
   " yaml
   Plugin 'mrk21/yaml-vim'
   " Used for coerce, crs, crm, crc,cru ( coerce to snake, mixed, camel,
   " upper,etc
   Plugin 'tpope/vim-abolish'
   " Python
   Plugin 'python-mode/python-mode'
   Plugin 'vim-scripts/indentpython.vim'
   "SLOWS
   "Plugin 'tmhedberg/SimpylFold'

   Plugin 'TaskList.vim' "TODO: Did i use this?
   Plugin 'jceb/vim-orgmode' "TODO: Might use this, for the course
call vundle#end()

"{{{
set exrc
set secure
set showcmd "show last command enter of bottom right
"SLOW
set cursorline "highlight current line
set wildmenu "visual auto complete for command menu
set lazyredraw "redraw only when we need to
"}}}
"
"{{{ cpp stuff
augroup project
     autocmd!
     autocmd BufRead,BufNewFile *.h,*.c set filetype=c.doxygen
augroup END
"}}}

"{{{ encoding
set encoding=utf-8
set fileencoding=utf-8
scriptencoding utf-8
"}}}
filetype on
filetype plugin indent on    " required
syntax on

" Solarized Plugin{{{
   set background=dark
   if &t_Co >=256 || has("gui_running")
      colorscheme solarized
   endif
" }}}
"
" Common setings{{{
let mapleader=","
"set clipboard=unamed "CHECKME: Is copying working
set nowrap        " don't wrap lines
set tabstop=4     " a tab is four spaces
set shiftwidth=4  " number of spaces to use for autoindenting
set softtabstop=4 " a tab is four spaces
set backspace=indent,eol,start
                  " allow backspacing over everything in insert mode
set expandtab	  " always expand, noexpandtab is required only for makefile
set autoindent    " always set autoindenting on
set copyindent    " copy the previous indentation on autoindenting
set number        " always show line numbers
"SLOW?
"set relativenumber " Show relative number
set shiftround    " use multiple of shiftwidth when indenting with '<' and '>'
set showmatch     " set show matching parenthesis
set matchtime=0   " Avoid cursor to jump
set ignorecase    " ignore case when searching
set smartcase     " ignore case if search pattern is all lowercase,
                  "    case-sensitive otherwise
set smarttab      " insert tabs on the start of a line according to
                  "    shiftwidth, not tabstop
set hlsearch      " highlight search terms
set incsearch     " show search matches as you type

set history=1000         " remember more commands and search history
set undolevels=1000      " use many muchos levels of undo
set wildignore=*.swp,*.bak,*.pyc,*.class
set wildignore+=*.a,*.o,
set wildignore+=.git,*.bmp,*.gif,*.jpg,*.png
set title                " change the terminal's title
set visualbell           " don't beep
set noerrorbells         " don't beep
set confirm				 " Display confirmation when closing an unsaved file

set nobackup
set nowritebackup
set noswapfile
set ruler			"Show cursor's current col and line number
set autoread		"Reload buffer if file was modified in another buffer
set shortmess+=I	  "Suppress startup message on vim
set list
set listchars=tab:→\ ,trail:∙,nbsp:•,eol:¬
autocmd filetype html,xml set listchars-=tab:>.

" show invisible
set list listchars=tab:▸\ ,trail:·,precedes:←,extends:→,eol:↲,nbsp:␣
" hi NonText ctermfg=16 guifg=#4a4a59
" hi SpecialKey ctermfg=16 guifg=#4a4a59
" }}}
"
" Autocmd for aterating defaults {{{
" }}}
"
"
" Mapped Keys {{{
nmap <leader>l :set list!<cr>
nmap <leader>w :w<cr> "Write file
nmap <leader>wq :wq<cr> "Write and quiteifile
nmap <leader>q :q<cr> "Quit file
nnoremap <leader>ev :vsplit $MYVIMRC<cr>
nnoremap <leader>sv :source $MYVIMRC<cr>
" }}}
"
"
" UltiSnips not working with paste set
" set paste
"
"NERDTree
noremap <Leader>f :NERDTreeToggle<Enter>
nnoremap <silent> <Leader>v :NERDTreeFind<cr>
let NERDTreeIgnore=['\.pyc$', '\~$'] "ignore files in NERDTree

"tagbar plugin
noremap <Leader>T :TagbarToggle<Enter>

"
" vim-markdown-preview {{{
" pip install grip
" 0 - depends on markdown perl plugin
" 1 - for github style
let vim_markdown_preview_github=1
" 0, not on buffer write 1 - display image on ctrl-p, 2 - preview on write
" with image, 3- preview on write without image rendering
let vim_markdown_preview_toggle=0
"}}}
"
"{{{

" OmniCppComplete
let OmniCpp_NamespaceSearch = 1
let OmniCpp_GlobalScopeSearch = 1
let OmniCpp_ShowAccess = 1
let OmniCpp_ShowPrototypeInAbbr = 1 " show function parameters
let OmniCpp_MayCompleteDot = 1 " autocomplete after .
let OmniCpp_MayCompleteArrow = 1 " autocomplete after ->
let OmniCpp_MayCompleteScope = 1 " autocomplete after ::
let OmniCpp_DefaultNamespaces = ["std", "_GLIBCXX_STD"]
" automatically open and close the popup menu / preview window
au CursorMovedI,InsertLeave * if pumvisible() == 0|silent! pclose|endif
set completeopt=menuone,menu,longest,preview
au BufNewFile,BufRead,BufEnter *.cpp,*.hpp set omnifunc=omni#cpp#complete#Main

""}}}

" {{{
" For IdentLine plugin
" :IndentToggle
set softtabstop=4 " makes the spaces feel like real tabs
" let g:indentLine_color_term = 239
" let g:indentLine_char = '|'
" }}}



" {{{ vim-go customization
" https://github.com/fatih/vim-go-tutorial#quick-setup
" gofmt and rewrite the import declarations
" vendor packages not working, trying with -srcdir .
let g:go_fmt_command = "goimports"
let g:go_autodetect_gopath = 1


"
autocmd BufNewFile,BufRead *.go setlocal expandtab tabstop=4 softtabstop=4 shiftwidth=4
" }}}

" {{{ Added 01/sep/1028
" Write the file automatically, if we call :make {eg, :GoBuild,GoTest etc, it will
" automatically savea the file before compiling
set autowrite

" To make it easier to jump between errors in quickfix list:
map <C-n> :cnext<cr>
map <C-m> :cprevious<cr>
nnoremap <leader>a :cclose<cr>

" run :GoBuild or :GoTestCompile based on the go file
function! s:build_go_files()
  let l:file = expand('%')
  if l:file =~# '^\f\+_test\.go$'
    call go#test#Test(0, 1)
  elseif l:file =~# '^\f\+\.go$'
    call go#cmd#Build(0)
  endif
endfunction

" Shortcuts for building Go programs
autocmd FileType go nmap <leader>b :<C-u>call <SID>build_go_files()<cr>
autocmd FileType go nmap <leader>t <Plug>(go-test)
autocmd FileType go nmap <leader>c <Plug>(go-coverage-toggle)
autocmd FileType go nmap <leader>i <Plug>(go-info)
autocmd FileType go nmap <C-]> :GoDef<cr>
autocmd FileType go nmap <C-t> :GoDefPop<cr>
autocmd FileType go nmap <C-T> :GoDefStack<cr>
autocmd FileType go nmap <C-c> :GoCallers<cr>
autocmd FileType go nmap <C-C> :GoCallStack<cr>



autocmd Filetype go command! -bang A call go#alternate#Switch(<bang>0, 'edit')
autocmd Filetype go command! -bang AV call go#alternate#Switch(<bang>0, 'vsplit')
autocmd Filetype go command! -bang AS call go#alternate#Switch(<bang>0, 'split')
autocmd Filetype go command! -bang AT call go#alternate#Switch(<bang>0, 'tabe')

" Use only quickfix list not location list
let g:go_list_type = "quickfix"
" vim-go default  is snake_case
let g:go_addtags_transform = "camelcase"
" highligt types, fields
let g:go_highlight_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_function_calls = 1
let g:go_highlight_operators = 1
let g:go_highlight_extra_types = 1

" default settings, add if more
let g:go_metalinter_enabled = ['vet', 'golint', 'errcheck']
" Run on every save
let g:go_metalinter_autosave = 1
let g:go_metalinter_autosave_enabled = ['vet', 'golint']
let g:go_metalinter_deadline = "5s"


"""ENN try-mode
 let g:syntastic_go_checkers = ['golint', 'govet']
 let g:syntastic_mode_map = { 'mode': 'active', 'passive_filetypes': ['go'] }
" If you want to add errcheck you can use gometalinter as a wrapper
 let g:syntastic_go_checkers = ['golint', 'govet', 'gometalinter']
 let g:syntastic_go_gometalinter_args = ['--disable-all', '--enable=errcheck']
 let g:syntastic_mode_map = { 'mode': 'active', 'passive_filetypes': ['go'] }
"Another issue with `vim-go` and `syntastic` is that the location list window
"that contains the output of commands such as `:GoBuild` and `:GoTest` might
"not appear.  To resolve this:
 let g:go_list_type = "quickfix"
 """

" use godef instead of guru, FIXME: Find which is better for you
let g:go_def_mode = 'godef'
let g:go_auto_type_info = 1
let g:go_auto_sameids = 1

let g:go_guru_scope = [ "adp-gs-cm-nbi" ]
set updatetime=100

" For SirVer/ultisnips

filetype plugin indent on

" make YCM compatible with UltiSnips (using supertab)
nnoremap <leader>y :let g:ycm_auto_trigger=0<CR>                " turn " off YCM
nnoremap <leader>Y :let g:ycm_auto_trigger=1<CR>                "turn on
" YCM
let g:ycm_auto_trigger=1 " Ycm better than pymode?
let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
let g:ycm_autoclose_preview_window_after_completion=1
map <leader>g  :YcmCompleter GoToDefinitionElseDeclaration<cr>
let g:ycm_collect_identifiers_from_tags_files = 1 " Let YCM read tags from Ctags file
let g:ycm_use_ultisnips_completer = 1 " Default 1, just ensure
let g:ycm_seed_identifiers_with_syntax = 1 " Completion for programming language's keyword
let g:ycm_complete_in_comments = 1 " Completion in comments
let g:ycm_complete_in_strings = 1 " Completion in string
let g:SuperTabDefaultCompletionType = '<C-n>'


" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-j>"
let g:UltiSnipsJumpBackwardTrigger="<c-k>"
let g:UtliSnipsListSnippets = "<c-l>"

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"


" Check :help go-settings

" Trial, remove them after
let g:rehash256 = 1
let g:molaki_original = 1
colorscheme molokai


" For vim-airline, install powerline font
" git clone https://github.com/powerline/fonts; cd fonts/; ./install.sh
" Set terminal profile to use a powerline font of your choice
"SLOWS?
"let g:airline#extensions#tabline#enabled = 1
"let g:airline#extensions#syntastic#enabled = 1
"let g:airline_theme='powerlineish'
"let g:airline_powerline_fonts = 1
"set laststatus=2

" close help buffer using q
autocmd FileType help noremap <buffer> q :q<cr>
" }}}
"
" {{{
" Whitespace
highlight BadWhitespace ctermbg=red guibg=red
au BufRead,BufNewFile *.py,*.pyw,*.c,*.h match BadWhitespace /\s\+$/
" }}}

"
"
" Open a terminal from vim
noremap <C-r> :term<Enter>
" Terminal window size of alteast 20 rows and columns to match the current
" window
set termwinsize = "20*0"
" New split windows, at bottom
set splitbelow
set splitright

" Yaml
au! BufNewFile,BufReadPost *.{yaml,yml} set filetype=yaml foldmethod=indent
autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab

" VIM, navigating between the panes
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l
" Or may be <cr> itself>
nnoremap <cr> <C-w><C-w>

" {{{
" Python IDE
"
"
set nofoldenable
"set foldmethod=indent
"set foldlevel=99
"nnoremap <space> za


"https://github.com/Valloric/YouCompleteMe#python-semantic-completion
let g:ycm_python_interpreter_path = '/usr/bin/python'
let g:ycm_python_sys_path = []
let g:ycm_extra_conf_vim_data = [
   \  'g:ycm_python_interpreter_path',
   \  'g:ycm_python_sys_path'
   \]
let g:ycm_global_ycm_extra_conf = '~/global_extra_conf.py'

au BufNewFile, BufRead *.py
	\ set tabstop=4
	\ set softtabstop=4
	\ set shiftwidth=4
	\ set textwidth=100
	\ set expandtab
	\ set autoindent
	\ set fileformat=unix
	\ set smartindent
let python_highlight_all=1

" python with virtualenv support
py << EOF
import os
import sys
if 'VIRTUAL_ENV' in os.environ:
	project_base_dir = os.environ['VIRTUAL_ENV']
	activate_this = os.path.join(project_base_dir, 'bin/activate_this.py')
	execfile(activate_this, dict(__file__=activate_this))
EOF
"}}}
" Abbrevations
iabbrev @@ ennc0d3@gmail.com

" Custom mapping
inoremap jk <esc>
inoremap <esc> <nop>


"
"python formatter:
" What to choose? yapf vs autopep8 vs black
" Seems like black is good, similar to gofmt ( without options)
" autopep8 definitely no, Choose between yapf or black
"
" Few pints of ale
" Run only after save,
let g:ale_lint_on_text_change = 'never'
let g:ale_lint_on_enter = 0

let g:ale_linters = {}
let g:ale_linters.python = ['flake8', 'pylint', 'pycodestyle']
let g:ale_python_pylint_options = '--rcfile ~/git/dotfiles/pylintrc'


" Ale settings
" ale_sh: Fixer shfmt (go get -u github.com/mdvan/sh/cmd/shcmd)
let g:ale_fix_on_save=1
let g:ale_fixers = {
	\ '*': ['remove_trailing_lines', 'trim_whitespace'],
	\ 'python': ['yapf', 'isort', 'black', 'autopep8'],
	\ 'sh': ['shfmt'],
  \ }
let g:ale_sh_shell_default_shell='bash'
let g:ale_fixers.python = ['yapf', 'autopep8', 'isort']
nmap <silent> [s <Plug>(ale_previous_wrap)
nmap <silent> ]s <Plug>(ale_next_wrap)
nmap <leader>= <Plug>(ale_fix)
nmap <leader>+ :let b:ale_enabled=1<cr>

"Disable Ale for the following file patterns
let g:ale_pattern_options = {
	\ '.*\.txt$': { 'ale_enabled': 0 },
	\ '.*\.rst$': { 'ale_enabled': 0 },
	\}
"
" Plugins need to be added to runtimepath before helptags can be generated.
packloadall
" Load all of the helptags now, after plugins have been loaded.
" All messages and errors will be ignored.
silent! helptags ALL

"
"
let g:pymode=0
let g:pymode_python='python'
let g:pymode_syntax=1
let g:pymode_syntax_all=1
let g:pymode_syntax_indent_errors=1
let g:pymode_syntax_space_errors=1
let g:pymode_options_colorcolumn = 1
let g:pymode_doc = 1
let g:pymode_doc_bind = 'K'
let g:pymode_virtualenv = 1
let g:pymode_lint = 0 "Disabled in favour of ALE
let g:pymode_rope = 0
let g:pymode_rope_lookup_project = 0
let g:pymode_rope_completion = 1
let g:pymode_rope_completion_on_dot = 1
let g:pymode_rope_completion_bind = '<C-space>'
let g:pymode_rope_autoimport = 1
let g:pymode_rope_goto_definition_bind = '<C-c>g'
let g:pymode_rope_rename_bindi = '<C-c>rr'
let g:pymode_rope_organize_imports_bind = '<C-c>ro'
""
"My lessons on vim!
"* Learn to use :help, Google at last resort
"* Look for common mistakes, repetitive tasks, annoyances. Fix them using .vimrc
"* Use vimawesome.com, before installing any plugin.
"* Update your self, check the trends https://github.com/trending/vim-script
"* Learn vimscript, learnvimscriptthehardway.stevelosh.com
"* Maintain ~/.vimrc, remove unused plugin or bindings
"* remap <ESC>
"
" TODO:
" Use TaskList
" Use CtrlP
" Use python-mode
" Use ale
" check if python-mode rope conflict with ycm
"
"
"
" wayneye.com/vimrc
"***Language specified***
" shell (tab width 2 chr)
"autocmd FileType sh set sw=2
"autocmd FileType sh set ts=2
"autocmd FileType sh set sts=2
"autocmd FileType sh set textwidth=0 expandtab
"autocmd FileType sh map <buffer> <C-S-e> :w<CR>:!/bin/sh % <CR>
" YAML (tab width 2 chr, no wrapping)
"autocmd FileType yaml set sw=2
"autocmd FileType yaml set ts=2
"autocmd FileType yaml set sts=2
"autocmd FileType yaml set textwidth=0 expandtab
" Python (tab width 4 chr)
"autocmd FileType python set sw=4
"autocmd FileType python set ts=4
"autocmd FileType python set sts=4
" Json (tab width 2 chr)
"autocmd FileType json set sw=2
"autocmd FileType json set ts=2
"autocmd FileType json set sts=2
"autocmd FileType json set textwidth=0 expandtab

" Setup Omnicompletion
" Messing with pymode?
"autocmd FileType python set omnifunc=pythoncomplete#Complete
"autocmd FileType html set omnifunc=htmlcomplete#CompleteTags
"autocmd FileType xml set omnifunc=xmlcomplete#CompleteTags
"autocmd FileType c set omnifunc=ccomplete#Complete
"improve autocomplete menu color
"highlight Pmenu ctermbg=238 gui=bold

"
"
" NOTES:
" q:  - Dynamic list of commands run in command mode aka history
" :e <C-d> - List directories
"  [count] {operator} {[count] motion|text object}
